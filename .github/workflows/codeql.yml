# GitHub Actions Workflow for CodeQL Security Analysis
name: "CodeQL Advanced"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '19 18 * * 4'  # Runs every Thursday at 18:19 UTC

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}

    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: java-kotlin
          build-mode: autobuild
        # Supports multiple languages: 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # Default queries, but you can add custom ones

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

    # OWASP Dependency Check - Scans for vulnerable dependencies
    - name: Run OWASP Dependency Check
      run: |
        echo "Running OWASP Dependency Check..."
        mkdir -p owasp-reports
        mvn org.owasp:dependency-check-maven:check

    # PMD - Static Code Quality Analysis
    - name: Run PMD
      run: |
        echo "Running PMD..."
        mvn pmd:pmd

    # SpotBugs - Finds bugs in Java code
    - name: Run SpotBugs
      run: |
        echo "Running SpotBugs..."
        mvn spotbugs:spotbugs

    # Semgrep - Deep static security scanning
    - name: Run Semgrep Security Scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: "p/default"

    # Gitleaks - Detects secrets in code
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      with:
        config-path: ".github/gitleaks.toml"

    # Trivy - Scans for vulnerabilities & misconfigurations
    - name: Run Trivy Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: "ghcr.io/${{ github.repository }}:latest"
        format: "table"
        exit-code: 1
        vuln-type: "os,library"
        severity: "HIGH,CRITICAL"

    # If autobuild fails, fall back to manual build
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'Autobuild failed! Manually building project...'
        mvn clean install -DskipTests
