name: Android CI/CD Pipeline

# üöÄ Features Included in the CI/CD Pipeline
# üöß PR Restriction: Ensures only repository collaborators/members can raise PRs.
# üõ°Ô∏è Security Scan (CodeQL): Runs CodeQL security analysis.
# üîç Dependency Scan (Trivy): Scans dependencies for vulnerabilities.
# ü§ñ AI Code Review (Copilot): Enforces GitHub Copilot AI review on PRs.
# üìú PR Description Enforcement: Ensures meaningful PR descriptions.
# üìë PR File Limit Enforcement: Restricts PRs modifying too many files.
# üé® Linting (ktlint): Enforces Kotlin coding standards.
# ‚úÖ Organization Owner Approval: Requires manual approval from the repository owner.
# üöÄ Build & APK Generation: Compiles the project and generates an APK.
# üß™ Unit Testing: Runs unit tests (optional but recommended).
# ‚úÖ Final Merge Check: Ensures that all required jobs pass before PR approval.
# üîÑ Fail-Fast Strategy: Prevents unnecessary job execution if a critical job fails.
# ‚è≥ Timeout Enforcement: Limits execution time to prevent long-running jobs.
# ‚ôªÔ∏è Resource Cleanup: Ensures that workspaces are cleaned after execution.
# üì¢ Notifications: Sends alerts in case of failures (Slack, email, etc.).
# üîÅ Retry Mechanism: Retries transient failures automatically.
# ‚ö° Parallelization: Runs independent jobs concurrently to speed up execution.
# üì¶ Dependency Caching: Caches Gradle dependencies to optimize build speed.


on:
  pull_request:
    types: [opened, synchronize, reopened, edited, ready_for_review]
    branches:
      - master
    paths:
      - '**'
  push:
    branches:
      - master

permissions:
  pull-requests: write
  contents: write
  security-events: write  # Required for CodeQL scanning
  actions: write

jobs:
# 1Ô∏è‚É£ Pre-Checks & PR Validation (No dependencies)
  pr_restriction:
    name: üöß Enforce PR Restrictions
    runs-on: ubuntu-latest
    
    steps:
      - name: üîç Debug & Verify PR Author
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Starting PR Debugging..."
          echo "üîπ GitHub Event: ${{ github.event_name }}"
          echo "üîπ Repository: ${{ github.repository }}"
          echo "üîπ Actor: ${{ github.actor }}"
          echo "üîπ Action: ${{ github.event.action }}"
          echo "üîπ PR Number: ${{ github.event.pull_request.number }}"
          echo "üîπ PR URL: ${{ github.event.pull_request.html_url }}"
          
          echo "üîç Extracting PR Number..."
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
  
          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "‚ùå ERROR: PR number is missing or invalid."
            exit 1
          fi
  
          echo "üîπ Extracted PR Number: '$PR_NUMBER'"
          echo "üîπ Repository: $REPO_NAME"
  
          echo "üîç Checking GitHub Token Authentication..."
          gh auth status || { echo "‚ùå GH_TOKEN authentication failed!"; exit 1; }
  
          echo "üîç Fetching PR Author..."
          PR_USER=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER" | jq -r '.user.login')
  
          if [[ -z "$PR_USER" || "$PR_USER" == "null" ]]; then
            echo "‚ùå ERROR: Failed to retrieve PR author."
            echo "   - PR number may be incorrect"
            echo "   - GH_TOKEN may lack permissions"
            echo "   - Repository may be private"
            exit 1
          fi
  
          echo "‚úÖ PR Author: $PR_USER"
  
          echo "üîç Checking if PR author is a collaborator or member..."
          COLLABORATOR_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/collaborators/$PR_USER")
  
          if [[ "$COLLABORATOR_STATUS" -ne 204 ]]; then
            echo "‚ùå ERROR: Only repository collaborators or members can raise pull requests!"
            exit 1
          fi
  
          echo "‚úÖ PR is from an authorized collaborator or member."
  
          # Mark the PR status as 'success' if everything passes
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"state": "success", "target_url": "https://example.com", "description": "PR passed restriction checks", "context": "PR Restrictions"}' \
            https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}
  
      - name: Mark Failure Status (if failed)
        if: failure()  # This step will only run if any previous step fails
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"state": "failure", "target_url": "https://example.com", "description": "PR failed restriction checks", "context": "PR Restrictions"}' \
            https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}

  enforce_pr_description:
    name: üìú Enforce PR Description
    runs-on: ubuntu-latest
    needs: [pr_restriction]
    steps:
      - name: üîç Check PR Description
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract pull request number
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
  
          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "‚ùå ERROR: Invalid PR number. Cannot check description."
            # Mark as failure status if PR number is invalid
            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"state": "failure", "target_url": "https://example.com", "description": "Invalid PR number", "context": "PR Description Check"}' \
              https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}
            exit 1
          fi
  
          # Retrieve the PR description using curl
          DESCRIPTION=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER" | jq -r '.body')
  
          # Debugging: Show raw description for clarity
          echo "üîç Raw PR Description:"
          echo "$DESCRIPTION"
  
          # Ensure description retrieval succeeded
          if [[ -z "$DESCRIPTION" || "$DESCRIPTION" == "null" ]]; then
            echo "‚ùå ERROR: PR must have a meaningful description!"
            # Mark as failure status if description is invalid
            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"state": "failure", "target_url": "https://example.com", "description": "PR must have a meaningful description", "context": "PR Description Check"}' \
              https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}
            exit 1
          fi
  
          # Trim whitespace and check if the description is empty
          TRIMMED_DESC=$(echo "$DESCRIPTION" | xargs)
  
          if [[ -z "$TRIMMED_DESC" ]]; then
            echo "‚ùå ERROR: PR description cannot be empty or only spaces!"
            # Mark as failure status if description is empty or only spaces
            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"state": "failure", "target_url": "https://example.com", "description": "PR description cannot be empty or only spaces", "context": "PR Description Check"}' \
              https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}
            exit 1
          fi
  
          echo "‚úÖ PR has a valid description."
          # Mark as success status if the description is valid
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"state": "success", "target_url": "https://example.com", "description": "PR has a valid description", "context": "PR Description Check"}' \
            https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}

  enforce_pr_files_limit:
    name: üìë Limit PR File Changes (Max 50)
    runs-on: ubuntu-latest
    needs: [enforce_pr_description]
    steps:
      - name: üîç Check Number of Files Changed
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract pull request number and repository name
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
  
          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "‚ùå ERROR: Invalid PR number. Cannot check file count."
            # Mark as failure status if PR number is invalid
            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"state": "failure", "target_url": "https://example.com", "description": "Invalid PR number", "context": "PR File Limit Check"}' \
              https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}
            exit 1
          fi
  
          # Fetch list of changed files using GitHub API
          RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER/files")
  
          # Debugging: Print the API response for troubleshooting
          echo "üîç API Response:"
          echo "$RESPONSE"
  
          # Extract file count
          FILE_COUNT=$(echo "$RESPONSE" | jq 'length' 2>/dev/null || echo "")
  
          # Ensure FILE_COUNT is valid and numeric
          if ! [[ "$FILE_COUNT" =~ ^[0-9]+$ ]]; then
            echo "‚ùå ERROR: Unable to determine the number of changed files."
            # Mark as failure status if we can't determine file count
            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"state": "failure", "target_url": "https://example.com", "description": "Unable to determine the number of changed files", "context": "PR File Limit Check"}' \
              https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}
            exit 1
          fi
  
          # Verify if the number of files changed exceeds the limit
          if [[ "$FILE_COUNT" -gt 50 ]]; then
            echo "‚ùå ERROR: PR modifies too many files ($FILE_COUNT). Please split into smaller PRs."
            # Mark as failure status if file count exceeds limit
            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"state": "failure", "target_url": "https://example.com", "description": "PR modifies too many files, exceeds limit of 50", "context": "PR File Limit Check"}' \
              https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}
            exit 1
          fi
  
          echo "‚úÖ PR modifies $FILE_COUNT files, within the allowed limit."
          # Mark as success status if file count is within the allowed limit
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"state": "success", "target_url": "https://example.com", "description": "PR modifies a valid number of files ($FILE_COUNT)", "context": "PR File Limit Check"}' \
            https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}

  # 2Ô∏è‚É£ Security & Code Quality Checks (All depend on PR validation)
  security_scan:
    name: üõ°Ô∏è Run CodeQL Advanced Deep Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: üõ°Ô∏è Run CodeQL Advanced Deep Scan
      uses: ./.github/workflows/codeql.yml  # Reusable CodeQL deep scan workflow
      with:
        language: 'java-kotlin'
        build-mode: 'autobuild'

    - name: Report Status
      run: |
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/check-runs \
          -d @- <<EOF
          {
            "name": "CodeQL Advanced Deep Scan",
            "head_sha": "${{ github.sha }}",
            "status": "completed",
            "conclusion": "success",
            "output": {
              "title": "Security Scan Report",
              "summary": "The CodeQL Advanced Deep Scan completed successfully.",
              "text": "No vulnerabilities found."
            }
          }
          EOF

  dependency_scan:
    name: üîç Dependency Scan (Trivy)
    runs-on: ubuntu-latest
    needs: [enforce_pr_files_limit]

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîé Scan for Vulnerabilities (Using Trivy Action)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          severity: 'HIGH,CRITICAL'

      - name: üìÑ Generate Trivy Report
        run: |
          trivy fs --severity HIGH,CRITICAL --format json -o trivy-report.json .

      - name: üìÑ Upload Trivy Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report
          path: trivy-report.json

      - name: üõ†Ô∏è Suggest Fixes
        run: |
          if [ -s trivy-report.json ]; then
            vulnerabilities=$(cat trivy-report.json | jq '.Results[]?.Vulnerabilities | length')
            if [ "$vulnerabilities" -gt 0 ]; then
              cat trivy-report.json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL") | "\(.PkgName) has \(.Severity) vulnerability: \(.VulnID) - \(.Title). Recommendation: \(.PrimaryURL)"'
            else
              echo "No high/critical vulnerabilities found."
            fi
          else
            echo "No vulnerabilities found or failed to generate the report."
          fi

      - name: üö® Fail if Vulnerabilities Found
        run: |
          if trivy fs --severity HIGH,CRITICAL . | grep -q "VULNERABILITY"; then
            echo "‚ùå High/Critical vulnerabilities found!"
            exit 1
          fi  # Added fi to properly close the if statement

      - name: Report Status
        run: |
          conclusion="success"
          if [ -s trivy-report.json ] && trivy fs --severity HIGH,CRITICAL . | grep -q "VULNERABILITY"; then
            conclusion="failure"
          fi

          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/check-runs \
            -d @- <<EOF
          {
            "name": "Dependency Scan (Trivy)",
            "head_sha": "${{ github.sha }}",
            "status": "completed",
            "conclusion": "$conclusion",
            "output": {
              "title": "Dependency Scan Report",
              "summary": "The dependency scan completed with conclusion: $conclusion.",
              "text": "$(cat trivy-report.json)"
            }
          }
          EOF
