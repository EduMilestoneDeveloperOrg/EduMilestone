name: Android CI/CD Pipeline

# 🚀 Features Included in the CI/CD Pipeline
# 🚧 PR Restriction: Ensures only repository collaborators/members can raise PRs.
# 🛡️ Security Scan (CodeQL): Runs CodeQL security analysis.
# 🔍 Dependency Scan (Trivy): Scans dependencies for vulnerabilities.
# 🤖 AI Code Review (Copilot): Enforces GitHub Copilot AI review on PRs.
# 📜 PR Description Enforcement: Ensures meaningful PR descriptions.
# 📑 PR File Limit Enforcement: Restricts PRs modifying too many files.
# 🎨 Linting (ktlint): Enforces Kotlin coding standards.
# ✅ Organization Owner Approval: Requires manual approval from the repository owner.
# 🚀 Build & APK Generation: Compiles the project and generates an APK.
# 🧪 Unit Testing: Runs unit tests (optional but recommended).
# ✅ Final Merge Check: Ensures that all required jobs pass before PR approval.
# 🔄 Fail-Fast Strategy: Prevents unnecessary job execution if a critical job fails.
# ⏳ Timeout Enforcement: Limits execution time to prevent long-running jobs.
# ♻️ Resource Cleanup: Ensures that workspaces are cleaned after execution.
# 📢 Notifications: Sends alerts in case of failures (Slack, email, etc.).
# 🔁 Retry Mechanism: Retries transient failures automatically.
# ⚡ Parallelization: Runs independent jobs concurrently to speed up execution.
# 📦 Dependency Caching: Caches Gradle dependencies to optimize build speed.


on:
  pull_request:
    types: [opened, synchronize, reopened, edited, ready_for_review]
    branches:
      - master
    paths:
      - '**'
  push:
    branches:
      - master

permissions:
  pull-requests: write
  contents: write
  security-events: write  # Required for CodeQL scanning
  actions: write
  statuses: write
  checks: read

jobs:
# 1️⃣ Pre-Checks & PR Validation (No dependencies)
  pr_restriction:
    name: 🚧 Enforce PR Restrictions
    runs-on: ubuntu-latest

    steps:
      - name: 🔍 Debug & Verify PR Author and Branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Starting PR Debugging..."
          echo "🔹 GitHub Event: ${{ github.event_name }}"
          echo "🔹 Repository: ${{ github.repository }}"
          echo "🔹 Actor: ${{ github.actor }}"
          echo "🔹 Action: ${{ github.event.action }}"
          echo "🔹 PR Number: ${{ github.event.pull_request.number }}"
          echo "🔹 PR URL: ${{ github.event.pull_request.html_url }}"
  
          echo "🔍 Extracting PR Number..."
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
  
          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "❌ ERROR: PR number is missing or invalid."
            exit 1
          fi
  
          echo "🔹 Extracted PR Number: '$PR_NUMBER'"
          echo "🔹 Repository: $REPO_NAME"
  
          echo "🔍 Checking GitHub Token Authentication..."
          gh auth status || { echo "❌ GH_TOKEN authentication failed!"; exit 1; }
  
          echo "🔍 Fetching PR Author..."
          PR_USER=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER" | jq -r '.user.login')
  
          if [[ -z "$PR_USER" || "$PR_USER" == "null" ]]; then
            echo "❌ ERROR: Failed to retrieve PR author."
            echo "   - PR number may be incorrect"
            echo "   - GH_TOKEN may lack permissions"
            echo "   - Repository may be private"
            exit 1
          fi
  
          echo "✅ PR Author: $PR_USER"
  
          echo "🔍 Checking if PR author is a collaborator or member..."
          COLLABORATOR_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/collaborators/$PR_USER")
  
          if [[ "$COLLABORATOR_STATUS" -ne 204 ]]; then
            echo "❌ ERROR: Only repository collaborators or members can raise pull requests!"
            exit 1
          fi
  
          echo "✅ PR is from an authorized collaborator or member."
  
          echo "🔍 Checking branch name..."
          PR_BRANCH="${{ github.head_ref }}"
          echo "🔹 PR Branch: $PR_BRANCH"
  
          # Check if branch name contains the required string
          if [[ ! "$PR_BRANCH" =~ M/M01/PROD_TOOLS/OCR/ ]]; then
            echo "❌ ERROR: Branch name does not meet the required pattern 'M/M01/PROD_TOOLS/OCR/'."
            exit 1
          fi
  
          echo "✅ Branch name '$PR_BRANCH' is valid and meets the required pattern."

  enforce_pr_description:
    name: 📜 Enforce PR Description
    runs-on: ubuntu-latest
    needs: [pr_restriction]
    steps:
      - name: 🔍 Check PR Description
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract pull request number
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
  
          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "❌ ERROR: Invalid PR number. Cannot check description."
            exit 1
          fi
  
          # Retrieve the PR description using curl
          DESCRIPTION=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER" | jq -r '.body')
  
          # Debugging: Show raw description for clarity
          echo "🔍 Raw PR Description:"
          echo "$DESCRIPTION"
  
          # Ensure description retrieval succeeded
          if [[ -z "$DESCRIPTION" || "$DESCRIPTION" == "null" ]]; then
            echo "❌ ERROR: PR must have a meaningful description!"
            exit 1
          fi
  
          # Trim whitespace and check if the description is empty
          TRIMMED_DESC=$(echo "$DESCRIPTION" | xargs)
  
          if [[ -z "$TRIMMED_DESC" ]]; then
            echo "❌ ERROR: PR description cannot be empty or only spaces!"
            exit 1
          fi
          
          echo "✅ PR has a valid description."

  enforce_pr_files_limit:
    name: 📑 Limit PR File Changes (Max 50)
    runs-on: ubuntu-latest
    needs: [enforce_pr_description]
    steps:
      - name: 🔍 Check Number of Files Changed
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract pull request number and repository name
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
  
          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "❌ ERROR: Invalid PR number. Cannot check file count."
            exit 1
          fi
  
          # Fetch list of changed files using GitHub API
          RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER/files")
  
          # Debugging: Print the API response for troubleshooting
          echo "🔍 API Response:"
          echo "$RESPONSE"
  
          # Extract file count
          FILE_COUNT=$(echo "$RESPONSE" | jq 'length' 2>/dev/null || echo "")
  
          # Ensure FILE_COUNT is valid and numeric
          if ! [[ "$FILE_COUNT" =~ ^[0-9]+$ ]]; then
            echo "❌ ERROR: Unable to determine the number of changed files."
            exit 1
          fi
  
          # Verify if the number of files changed exceeds the limit
          if [[ "$FILE_COUNT" -gt 50 ]]; then
            echo "❌ ERROR: PR modifies too many files ($FILE_COUNT). Please split into smaller PRs."
            exit 1
          fi
          
          echo "✅ PR modifies $FILE_COUNT files, within the allowed limit."

  # 2️⃣ Security & Code Quality Checks (All depend on PR validation)
  security_scan:
    name: 🛡️ Run CodeQL Advanced Deep Scan
    needs: [enforce_pr_files_limit]
    uses: ./.github/workflows/codeql.yml  # Reusable CodeQL deep scan workflow
    with:
      language: 'java-kotlin'
      build-mode: 'autobuild'

  dependency_scan:
    name: 🔍 Dependency Scan (Trivy)
    runs-on: ubuntu-latest
    needs: [enforce_pr_files_limit]
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: 🔎 Scan for Vulnerabilities (Using Trivy Action)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          severity: 'HIGH,CRITICAL'
  
      - name: 📄 Generate Trivy Report
        run: |
          trivy fs --severity HIGH,CRITICAL --format json -o trivy-report.json .
  
      - name: 📄 Upload Trivy Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report
          path: trivy-report.json
  
      - name: 🛠️ Suggest Fixes
        run: |
          if [ -s trivy-report.json ]; then
            vulnerabilities=$(cat trivy-report.json | jq '.Results[]?.Vulnerabilities | length')
            if [ "$vulnerabilities" -gt 0 ]; then
              cat trivy-report.json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL") | "\(.PkgName) has \(.Severity) vulnerability: \(.VulnID) - \(.Title). Recommendation: \(.PrimaryURL)"'
            else
              echo "No high/critical vulnerabilities found."
            fi
          else
            echo "No vulnerabilities found or failed to generate the report."
          fi
  
      - name: 🚨 Fail if Vulnerabilities Found
        run: |
          if trivy fs --severity HIGH,CRITICAL . | grep -q "VULNERABILITY"; then
            echo "❌ High/Critical vulnerabilities found!"
            exit 1
          fi  # Added fi to properly close the if statement

  # ✅ 🔎 Final Merge Check: Ensures PR meets all conditions before merging
  merge_check:
    name: ✅ Final Merge Check (All Jobs Status)
    runs-on: ubuntu-latest
    needs:
      - pr_restriction
      - enforce_pr_description
      - enforce_pr_files_limit
      - security_scan
      - dependency_scan  # Ensures all essential PR checks complete before processing
    outputs:
      merge_status: ${{ steps.verify_status.outputs.merge_status }}  # Pass status to next job

    steps:
      - name: 🔬 Verify Job Status Before Merging
        id: verify_status
        run: |
          echo "🔎 Checking all required job statuses..."
          if [[ "${{ needs.pr_restriction.result }}" == "failure" ]] || 
             [[ "${{ needs.enforce_pr_description.result }}" == "failure" ]] || 
             [[ "${{ needs.enforce_pr_files_limit.result }}" == "failure" ]] || 
             [[ "${{ needs.security_scan.result }}" == "failure" ]] || 
             [[ "${{ needs.dependency_scan.result }}" == "failure" ]]; then
            echo "❌ One or more jobs failed. Blocking merge."
            echo "merge_status=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ All jobs passed! Merge allowed."
          echo "merge_status=true" >> $GITHUB_OUTPUT

      - name: 📢 🚦 Update CI/CD Status on GitHub
        run: |
          echo "🔄 Updating CI/CD Status..."
          if [[ "${{ steps.verify_status.outputs.merge_status }}" == "true" ]]; then
            curl -X POST "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"state": "success", "context": "ci/cd", "description": "All checks passed successfully.", "target_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}'
          else
            curl -X POST "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"state": "failure", "context": "ci/cd", "description": "Merge blocked due to job failure.", "target_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}'
            exit 1
          fi

  # 📡 🔍 Merge Queue Check: Runs AFTER merge_check, verifies merge status, and sends final GitHub API status
  merge_queue_check:
    name: 📡 Merge Queue Check (Verify Merge Readiness)
    runs-on: ubuntu-latest
    needs: [merge_check]
    if: needs.merge_check.outputs.merge_status == 'true'  # Run only if merge_check passed
    outputs:
      merge_ready: ${{ steps.verify_merge_queue.outputs.merge_ready }}  # ✅ Output merge readiness
  
    steps:
      - name: 📥 Fetch PR from Merge Queue
        id: fetch_merge_queue
        run: |
          echo "🔍 Checking if PR is in the merge queue..."
          
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          # Fetch the specific PR's merge status
          MERGE_QUEUE_STATE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" \
            | jq -r '.mergeable_state')
  
          echo "🔍 PR Merge Queue State: $MERGE_QUEUE_STATE"
  
          if [[ "$MERGE_QUEUE_STATE" == "clean" || "$MERGE_QUEUE_STATE" == "unstable" ]]; then
            echo "✅ PR is in the merge queue and ready for merging."
            echo "merge_ready=true" >> $GITHUB_ENV
            echo "merge_ready=true" >> $GITHUB_OUTPUT  # ✅ Pass to `auto_merge`
          else
            echo "❌ PR is NOT in the merge queue. Merge will not proceed."
            echo "merge_ready=false" >> $GITHUB_ENV
            echo "merge_ready=false" >> $GITHUB_OUTPUT  # ✅ Pass to `auto_merge`
            exit 1
          fi
  
      - name: 📢 🚦 Send Final Success Status to GitHub API
        if: env.merge_ready == 'true'  # ✅ Only send success status if PR is in the merge queue
        run: |
          echo "🔄 Sending final CI/CD success status to GitHub API..."
          curl -X POST "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"state": "success", "context": "ci/cd", "description": "Final merge validation passed.", "target_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}'

  # 🔄 🚀 Automated Merge (Rebase): Runs only if merge_queue_check confirms readiness
  auto_merge:
    name: 🔄 🚀 Auto Merge PR (Rebase)
    runs-on: ubuntu-latest
    needs: [merge_queue_check]
    if: needs.merge_queue_check.outputs.merge_ready == 'true'  # ✅ Ensures PR is confirmed in the merge queue
  
    steps:
      - name: 🔄 🔃 Perform Rebase & Merge
        run: |
          echo "✅ PR is confirmed in the merge queue. Proceeding with merge..."
          
          # Parse the stored pending PRs safely
          PENDING_PRS=$(echo '${{ env.pending_prs }}' | jq -c '.')
  
          for row in $(echo "$PENDING_PRS" | jq -c '.[]'); do
            PR_NUMBER=$(echo "$row" | jq -r '.number')
  
            echo "🔄 Merging PR #$PR_NUMBER with rebase strategy"
  
            curl -X PUT "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/merge" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"commit_title": "🔄 Auto-merged by CI", "merge_method": "rebase"}'
          done
