name: Android CI/CD Pipeline

# üöÄ Features Included in the CI/CD Pipeline
# üöß PR Restriction: Ensures only repository collaborators/members can raise PRs.
# üõ°Ô∏è Security Scan (CodeQL): Runs CodeQL security analysis.
# üîç Dependency Scan (Trivy): Scans dependencies for vulnerabilities.
# ü§ñ AI Code Review (Copilot): Enforces GitHub Copilot AI review on PRs.
# üìú PR Description Enforcement: Ensures meaningful PR descriptions.
# üìë PR File Limit Enforcement: Restricts PRs modifying too many files.
# üé® Linting (ktlint): Enforces Kotlin coding standards.
# ‚úÖ Organization Owner Approval: Requires manual approval from the repository owner.
# üöÄ Build & APK Generation: Compiles the project and generates an APK.
# üß™ Unit Testing: Runs unit tests (optional but recommended).
# ‚úÖ Final Merge Check: Ensures that all required jobs pass before PR approval.
# üîÑ Fail-Fast Strategy: Prevents unnecessary job execution if a critical job fails.
# ‚è≥ Timeout Enforcement: Limits execution time to prevent long-running jobs.
# ‚ôªÔ∏è Resource Cleanup: Ensures that workspaces are cleaned after execution.
# üì¢ Notifications: Sends alerts in case of failures (Slack, email, etc.).
# üîÅ Retry Mechanism: Retries transient failures automatically.
# ‚ö° Parallelization: Runs independent jobs concurrently to speed up execution.
# üì¶ Dependency Caching: Caches Gradle dependencies to optimize build speed.


on:
  pull_request:
    types: [opened, synchronize, reopened, edited, ready_for_review]
    branches:
      - master
    paths:
      - '**'
  push:
    branches:
      - master

permissions:
  pull-requests: write
  contents: write
  security-events: write  # Required for CodeQL scanning
  actions: write
  statuses: write
  id-token: write

jobs:
  pr_restriction:
    name: üöß Enforce PR Restrictions
    # ‚ùå Prevents workflow execution if triggered by github-merge-queue
    if: github.actor != 'github-merge-queue[bot]' 
    runs-on: ubuntu-latest
    steps:
      - name: ‚è≥ Delay Before Job Start
        run: sleep 3  # Adds a 3-second delay before execution
      - name: üîç Debug & Verify PR Author and Branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Starting PR Debugging..."
          echo "üîπ GitHub Event: ${{ github.event_name }}"
          echo "üîπ Repository: ${{ github.repository }}"
          echo "üîπ Actor: ${{ github.actor }}"
          echo "üîπ Action: ${{ github.event.action }}"
          echo "üîπ PR Number: ${{ github.event.pull_request.number }}"
          echo "üîπ PR URL: ${{ github.event.pull_request.html_url }}"
  
          echo "üîç Extracting PR Number..."
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
  
          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "‚ùå ERROR: PR number is missing or invalid."
            exit 1
          fi
  
          echo "üîπ Extracted PR Number: '$PR_NUMBER'"
          echo "üîπ Repository: $REPO_NAME"
  
          echo "üîç Checking GitHub Token Authentication..."
          gh auth status || { echo "‚ùå GH_TOKEN authentication failed!"; exit 1; }
  
          echo "üîç Fetching PR Author..."
          PR_USER=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER" | jq -r '.user.login')
  
          if [[ -z "$PR_USER" || "$PR_USER" == "null" ]]; then
            echo "‚ùå ERROR: Failed to retrieve PR author."
            exit 1
          fi
  
          echo "‚úÖ PR Author: $PR_USER"
  
          echo "üîç Checking if PR author is a collaborator or member..."
          COLLABORATOR_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/collaborators/$PR_USER")
  
          if [[ "$COLLABORATOR_STATUS" -ne 204 ]]; then
            echo "‚ùå ERROR: Only repository collaborators or members can raise pull requests!"
            exit 1
          fi
  
          echo "‚úÖ PR is from an authorized collaborator or member."
  
          echo "üîç Checking if PR author is a member of 'neural-vision' team..."
          TEAM_MEMBERS_URL="https://api.github.com/orgs/EduMilestoneDeveloperOrg/teams/neural-vision/members"
          TEAM_MEMBERS=$(curl -s -H "Authorization: token $GH_TOKEN" "$TEAM_MEMBERS_URL" | jq -r '.[].login')
  
          if echo "$TEAM_MEMBERS" | grep -q "^$PR_USER$"; then
            echo "‚úÖ PR Author '$PR_USER' is a member of the 'neural-vision' team."
          else
            echo "‚ùå ERROR: PR Author '$PR_USER' is NOT a member of 'neural-vision'. PRs from unauthorized users are blocked!"
            exit 1
          fi
  
          echo "üîç Checking branch name..."
          PR_BRANCH="${{ github.head_ref }}"
          echo "üîπ PR Branch: $PR_BRANCH"
  
          # Check if branch name contains the required string
          if [[ ! "$PR_BRANCH" =~ M/M01/PROD_TOOLS/OCR/ ]]; then
            echo "‚ùå ERROR: Branch name does not meet the required pattern 'M/M01/PROD_TOOLS/OCR/'."
            exit 1
          fi
          echo "‚úÖ Branch name '$PR_BRANCH' is valid and meets the required pattern."
  
  enforce_pr_description:
    name: üìú Enforce PR Description
    # ‚ùå Prevents workflow execution if triggered by `github-merge-queue`
    if: github.actor != 'github-merge-queue[bot]' 
    runs-on: ubuntu-latest
    needs: [pr_restriction]
    steps:
      - name: ‚è≥ Delay Before Job Start
        run: sleep 3  # Adds a 3-second delay before execution
      - name: üîç Check PR Description
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract pull request number
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
  
          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "‚ùå ERROR: Invalid PR number. Cannot check description."
            exit 1
          fi
  
          # Retrieve the PR description using curl
          DESCRIPTION=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER" | jq -r '.body')
  
          # Debugging: Show raw description for clarity
          echo "üîç Raw PR Description:"
          echo "$DESCRIPTION"
  
          # Ensure description retrieval succeeded
          if [[ -z "$DESCRIPTION" || "$DESCRIPTION" == "null" ]]; then
            echo "‚ùå ERROR: PR must have a meaningful description!"
            exit 1
          fi
  
          # Trim whitespace and check if the description is empty
          TRIMMED_DESC=$(echo "$DESCRIPTION" | xargs)
  
          if [[ -z "$TRIMMED_DESC" ]]; then
            echo "‚ùå ERROR: PR description cannot be empty or only spaces!"
            exit 1
          fi
          
          echo "‚úÖ PR has a valid description."

  enforce_pr_files_limit:
    name: üìë Limit PR File Changes (Max 50)
    # ‚ùå Prevents workflow execution if triggered by `github-merge-queue`
    if: github.actor != 'github-merge-queue[bot]' 
    runs-on: ubuntu-latest
    needs: [enforce_pr_description]
    steps:
      - name: ‚è≥ Delay Before Job Start
        run: sleep 3  # Adds a 3-second delay before execution
      - name: üîç Check Number of Files Changed
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract pull request number and repository name
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
  
          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "‚ùå ERROR: Invalid PR number. Cannot check file count."
            exit 1
          fi
  
          # Fetch list of changed files using GitHub API
          RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER/files")
  
          # Debugging: Print the API response for troubleshooting
          echo "üîç API Response:"
          echo "$RESPONSE"
  
          # Extract file count
          FILE_COUNT=$(echo "$RESPONSE" | jq 'length' 2>/dev/null || echo "")
  
          # Ensure FILE_COUNT is valid and numeric
          if ! [[ "$FILE_COUNT" =~ ^[0-9]+$ ]]; then
            echo "‚ùå ERROR: Unable to determine the number of changed files."
            exit 1
          fi
  
          # Verify if the number of files changed exceeds the limit
          if [[ "$FILE_COUNT" -gt 50 ]]; then
            echo "‚ùå ERROR: PR modifies too many files ($FILE_COUNT). Please split into smaller PRs."
            exit 1
          fi
          
          echo "‚úÖ PR modifies $FILE_COUNT files, within the allowed limit."

  # 2Ô∏è‚É£ Security & Code Quality Checks (All depend on PR validation)
  linting:
    name: üé® Lint Code (MegaLinter)
    runs-on: ubuntu-latest
    needs: [enforce_pr_files_limit]
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to avoid shallow clone issues

      - name: üöÄ Run MegaLinter with Autofix (Docker)
        id: linter
        run: |
          docker run \
            -e GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}" \
            -v ${{ github.workspace }}:/tmp/lint \
            -v /tmp/lint/.cache:/tmp/lint/.cache \
            -w /tmp/lint \
            megalinter/megalinter:latest \
            --fix
          mkdir -p ${{ github.workspace }}/megalinter-report
          cp -r /tmp/lint/report/* ${{ github.workspace }}/megalinter-report

      - name: üí¨ Add Lint Review Comments
        if: failure()
        uses: actions/github-script@v4
        with:
          script: |
            const { github } = require('@actions/github');
            const fs = require('fs');
            const lintResults = fs.readFileSync('${{ github.workspace }}/megalinter-report/linters_logs/ERROR-KOTLIN_KTLINT.log', 'utf8');
            github.issues.createComment({
              ...github.context.repo,
              issue_number: github.context.issue.number,
              body: `Linting issues detected:\n\`\`\`${lintResults}\`\`\``
            });

      - name: ‚úÖ Re-check Linting
        if: failure()
        uses: actions/github-script@v4
        with:
          script: |
            const { github } = require('@actions/github');
            const fs = require('fs');
            const lintResults = fs.readFileSync('${{ github.workspace }}/megalinter-report/linters_logs/ERROR-KOTLIN_KTLINT.log', 'utf8');
            if (!lintResults.trim()) {
              github.pulls.createReview({
                ...github.context.repo,
                pull_number: github.context.issue.number,
                event: 'APPROVE',
                body: 'Linting issues resolved. Approved.'
              });
            } else {
              github.issues.createComment({
                ...github.context.repo,
                issue_number: github.context.issue.number,
                body: `Linting issues still detected:\n\`\`\`${lintResults}\`\`\``
              });
            }

      - name: üìÑ Upload Linting Error Report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: megalinter-report
          path: ${{ github.workspace }}/megalinter-report
          if-no-files-found: warn
          compression-level: 6
          overwrite: false
          include-hidden-files: false

  static_code_analysis:
    name: üõ†Ô∏è Static Code Analysis (Detekt)
    runs-on: ubuntu-latest
    needs: [enforce_pr_files_limit]

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full history is fetched

      - name: üöÄ Install Dependencies (Java & Unzip)
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip openjdk-17-jdk curl

      - name: üöÄ Install Detekt
        env:
          DETEKT_VERSION: "1.23.0"
        run: |
          echo "üîÑ Installing Detekt v$DETEKT_VERSION..."
          
          # Download Detekt CLI
          curl -sSLO "https://github.com/detekt/detekt/releases/download/v$DETEKT_VERSION/detekt-cli-$DETEKT_VERSION.zip"
          
          # Ensure zip downloaded correctly
          if [[ ! -f "detekt-cli-$DETEKT_VERSION.zip" ]]; then
            echo "‚ùå ERROR: Failed to download Detekt."
            exit 1
          fi
          
          # Extract Detekt CLI
          unzip -o "detekt-cli-$DETEKT_VERSION.zip" -d detekt-cli || { echo "‚ùå ERROR: Unzip failed!"; exit 1; }
          
          # Move JAR to a proper location
          sudo mv detekt-cli/detekt-cli-$DETEKT_VERSION/lib/detekt-cli-$DETEKT_VERSION-all.jar /usr/local/bin/detekt-cli.jar
          
          # Create a wrapper script
          echo -e "#!/bin/bash\njava -jar /usr/local/bin/detekt-cli.jar \"\$@\"" | sudo tee /usr/local/bin/detekt > /dev/null
          sudo chmod +x /usr/local/bin/detekt
          
          # Verify installation
          detekt --help || { echo "‚ùå ERROR: Detekt installation failed."; exit 1; }

      - name: üõ†Ô∏è Run Detekt Analysis with Retry
        run: |
          # Ensure detekt.yml exists, otherwise download the default config
          if [[ ! -f "detekt.yml" ]]; then
            echo "‚ö†Ô∏è detekt.yml not found. Downloading default..."
            curl -sSLo detekt.yml https://raw.githubusercontent.com/detekt/detekt/main/config/detekt.yml
          fi
          
          # Fix potential configuration errors in detekt.yml
          if grep -q 'maxIssues:' detekt.yml; then
            echo "üîß Fixing invalid 'maxIssues' type..."
            sed -i 's/maxIssues: [0-9]\+/maxIssues: "0"/g' detekt.yml
          fi
          
          # Create reports directory if missing
          mkdir -p reports
          
          # Retry logic
          MAX_RETRIES=3
          COUNTER=0
          
          while [ $COUNTER -lt $MAX_RETRIES ]; do
            echo "üîÑ Running Detekt analysis (Attempt $((COUNTER+1)))..."
          
            detekt --config detekt.yml --report html:reports/detekt.html
            EXIT_CODE=$?
          
            if [[ $EXIT_CODE -eq 0 ]]; then
              echo "‚úÖ Detekt analysis completed successfully!"
              exit 0
            fi
          
            echo "‚ö†Ô∏è Detekt found issues (Attempt $((COUNTER+1))). Retrying in 10 seconds..."
            COUNTER=$((COUNTER+1))
            sleep 10
          done
          
          echo "‚ùå ERROR: Static analysis found issues. Please fix them before merging."
          exit 1

      - name: üìÑ Upload Detekt Report
        uses: actions/upload-artifact@v4
        with:
          name: detekt-report
          path: reports/detekt.html
