name: Android CI/CD Pipeline

# üöÄ Features Included in the CI/CD Pipeline
# üöß PR Restriction: Ensures only repository collaborators/members can raise PRs.
# üõ°Ô∏è Security Scan (CodeQL): Runs CodeQL security analysis.
# üîç Dependency Scan (Trivy): Scans dependencies for vulnerabilities.
# ü§ñ AI Code Review (Copilot): Enforces GitHub Copilot AI review on PRs.
# üìú PR Description Enforcement: Ensures meaningful PR descriptions.
# üìë PR File Limit Enforcement: Restricts PRs modifying too many files.
# üé® Linting (ktlint): Enforces Kotlin coding standards.
# ‚úÖ Organization Owner Approval: Requires manual approval from the repository owner.
# üöÄ Build & APK Generation: Compiles the project and generates an APK.
# üß™ Unit Testing: Runs unit tests (optional but recommended).
# ‚úÖ Final Merge Check: Ensures that all required jobs pass before PR approval.
# üîÑ Fail-Fast Strategy: Prevents unnecessary job execution if a critical job fails.
# ‚è≥ Timeout Enforcement: Limits execution time to prevent long-running jobs.
# ‚ôªÔ∏è Resource Cleanup: Ensures that workspaces are cleaned after execution.
# üì¢ Notifications: Sends alerts in case of failures (Slack, email, etc.).
# üîÅ Retry Mechanism: Retries transient failures automatically.
# ‚ö° Parallelization: Runs independent jobs concurrently to speed up execution.
# üì¶ Dependency Caching: Caches Gradle dependencies to optimize build speed.


on:
  pull_request:
    types: [opened, synchronize, reopened, edited, ready_for_review]
    branches:
      - master
    paths:
      - '**'
  push:
    branches:
      - master

permissions:
  pull-requests: write
  contents: write
  security-events: write  # Required for CodeQL scanning
  actions: write

jobs:
# 1Ô∏è‚É£ Pre-Checks & PR Validation (No dependencies)
  pr_restriction:
    name: üöß Enforce PR Restrictions
    runs-on: ubuntu-latest
  
    steps:
      - name: üîç Debug & Verify PR Author
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Starting PR Debugging..."
          echo "üîπ GitHub Event: ${{ github.event_name }}"
          echo "üîπ Repository: ${{ github.repository }}"
          echo "üîπ Actor: ${{ github.actor }}"
          echo "üîπ Action: ${{ github.event.action }}"
          echo "üîπ PR Number: ${{ github.event.pull_request.number }}"
          echo "üîπ PR URL: ${{ github.event.pull_request.html_url }}"
          
          echo "üîç Extracting PR Number..."
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
  
          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "‚ùå ERROR: PR number is missing or invalid."
            exit 1
          fi
  
          echo "üîπ Extracted PR Number: '$PR_NUMBER'"
          echo "üîπ Repository: $REPO_NAME"
  
          echo "üîç Checking GitHub Token Authentication..."
          gh auth status || { echo "‚ùå GH_TOKEN authentication failed!"; exit 1; }
  
          echo "üîç Fetching PR Author..."
          PR_USER=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER" | jq -r '.user.login')
  
          if [[ -z "$PR_USER" || "$PR_USER" == "null" ]]; then
            echo "‚ùå ERROR: Failed to retrieve PR author."
            echo "   - PR number may be incorrect"
            echo "   - GH_TOKEN may lack permissions"
            echo "   - Repository may be private"
            exit 1
          fi
  
          echo "‚úÖ PR Author: $PR_USER"
  
          echo "üîç Checking if PR author is a collaborator or member..."
          COLLABORATOR_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/collaborators/$PR_USER")
  
          if [[ "$COLLABORATOR_STATUS" -ne 204 ]]; then
            echo "‚ùå ERROR: Only repository collaborators or members can raise pull requests!"
            exit 1
          fi
  
          echo "‚úÖ PR is from an authorized collaborator or member."

  enforce_pr_description:
    name: üìú Enforce PR Description
    runs-on: ubuntu-latest
    needs: [pr_restriction]
    steps:
      - name: üîç Check PR Description
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract pull request number
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
  
          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "‚ùå ERROR: Invalid PR number. Cannot check description."
            exit 1
          fi
  
          # Retrieve the PR description using curl
          DESCRIPTION=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER" | jq -r '.body')
  
          # Debugging: Show raw description for clarity
          echo "üîç Raw PR Description:"
          echo "$DESCRIPTION"
  
          # Ensure description retrieval succeeded
          if [[ -z "$DESCRIPTION" || "$DESCRIPTION" == "null" ]]; then
            echo "‚ùå ERROR: PR must have a meaningful description!"
            exit 1
          fi
  
          # Trim whitespace and check if the description is empty
          TRIMMED_DESC=$(echo "$DESCRIPTION" | xargs)
  
          if [[ -z "$TRIMMED_DESC" ]]; then
            echo "‚ùå ERROR: PR description cannot be empty or only spaces!"
            exit 1
          fi
          
          echo "‚úÖ PR has a valid description."

  enforce_pr_files_limit:
    name: üìë Limit PR File Changes (Max 50)
    runs-on: ubuntu-latest
    needs: [enforce_pr_description]
    steps:
      - name: üîç Check Number of Files Changed
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract pull request number and repository name
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
  
          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "‚ùå ERROR: Invalid PR number. Cannot check file count."
            exit 1
          fi
  
          # Fetch list of changed files using GitHub API
          RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER/files")
  
          # Debugging: Print the API response for troubleshooting
          echo "üîç API Response:"
          echo "$RESPONSE"
  
          # Extract file count
          FILE_COUNT=$(echo "$RESPONSE" | jq 'length' 2>/dev/null || echo "")
  
          # Ensure FILE_COUNT is valid and numeric
          if ! [[ "$FILE_COUNT" =~ ^[0-9]+$ ]]; then
            echo "‚ùå ERROR: Unable to determine the number of changed files."
            exit 1
          fi
  
          # Verify if the number of files changed exceeds the limit
          if [[ "$FILE_COUNT" -gt 50 ]]; then
            echo "‚ùå ERROR: PR modifies too many files ($FILE_COUNT). Please split into smaller PRs."
            exit 1
          fi
          
          echo "‚úÖ PR modifies $FILE_COUNT files, within the allowed limit."
  security_scan:
    name: üõ°Ô∏è Trigger & Wait for CodeQL
    runs-on: ubuntu-latest
    needs: [enforce_pr_files_limit]
    steps:
      - name: üõéÔ∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üöÄ Trigger CodeQL Workflow
        id: trigger_codeql
        run: |
          echo "üîπ Triggering CodeQL workflow..."
          RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ secrets.PAT_GITHUB_ACTIONS }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/codeql.yml/dispatches \
            -d '{"ref":"${{ github.ref }}"}')

          if [[ $? -ne 0 ]]; then
            echo "‚ùå Failed to trigger CodeQL workflow."
            exit 1
          fi
          echo "‚úÖ CodeQL workflow triggered successfully."

      - name: ‚è≥ Wait for CodeQL to Complete (Max 30 min)
        run: |
          MAX_RETRIES=60  # 60 * 30s = 30 minutes
          COUNT=0
          RUN_ID=""

          echo "üîç Waiting for CodeQL workflow to start..."
          while [[ -z "$RUN_ID" && "$COUNT" -lt "$MAX_RETRIES" ]]; do
            RUN_ID=$(curl -s -H "Authorization: token ${{ secrets.PAT_GITHUB_ACTIONS }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/actions/runs \
              | jq -r '.workflow_runs[] | select(.name=="CodeQL Ultimate Security Scan") | .id' | head -n 1)

            if [[ -z "$RUN_ID" || "$RUN_ID" == "null" ]]; then
              echo "‚ö†Ô∏è CodeQL run not found yet. Retrying... ($COUNT/$MAX_RETRIES)"
              COUNT=$((COUNT+1))
              sleep 30
            else
              echo "‚úÖ Found CodeQL workflow run: ID=$RUN_ID"
            fi
          done

          if [[ -z "$RUN_ID" || "$RUN_ID" == "null" ]]; then
            echo "‚ùå CodeQL workflow did not start within 30 minutes."
            exit 1
          fi

          COUNT=0
          while [[ "$COUNT" -lt "$MAX_RETRIES" ]]; do
            STATUS=$(curl -s -H "Authorization: token ${{ secrets.PAT_GITHUB_ACTIONS }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID \
              | jq -r '.status')

            echo "üîÑ Current CodeQL Status: $STATUS"

            if [[ "$STATUS" == "completed" ]]; then
              CONCLUSION=$(curl -s -H "Authorization: token ${{ secrets.PAT_GITHUB_ACTIONS }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID \
                | jq -r '.conclusion')

              echo "üîç CodeQL Scan Conclusion: $CONCLUSION"

              if [[ "$CONCLUSION" == "success" ]]; then
                echo "‚úÖ CodeQL scan passed. Continuing pipeline..."
                exit 0
              else
                echo "‚ùå CodeQL scan failed! Blocking merge."
                exit 1
              fi
            fi

            echo "‚è≥ CodeQL is still running... ($COUNT/$MAX_RETRIES retries)"
            COUNT=$((COUNT+1))
            sleep 30
          done

          echo "‚ùå Timeout! CodeQL scan did not finish within 30 minutes."
          exit 1
