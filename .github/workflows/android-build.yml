name: Android CI/CD Pipeline

# 🚀 Features Included in the CI/CD Pipeline
# 🚧 PR Restriction: Ensures only repository collaborators/members can raise PRs.
# 🛡️ Security Scan (CodeQL): Runs CodeQL security analysis.
# 🔍 Dependency Scan (Trivy): Scans dependencies for vulnerabilities.
# 🤖 AI Code Review (Copilot): Enforces GitHub Copilot AI review on PRs.
# 📜 PR Description Enforcement: Ensures meaningful PR descriptions.
# 📑 PR File Limit Enforcement: Restricts PRs modifying too many files.
# 🎨 Linting (ktlint): Enforces Kotlin coding standards.
# ✅ Organization Owner Approval: Requires manual approval from the repository owner.
# 🚀 Build & APK Generation: Compiles the project and generates an APK.
# 🧪 Unit Testing: Runs unit tests (optional but recommended).
# ✅ Final Merge Check: Ensures that all required jobs pass before PR approval.
# 🔄 Fail-Fast Strategy: Prevents unnecessary job execution if a critical job fails.
# ⏳ Timeout Enforcement: Limits execution time to prevent long-running jobs.
# ♻️ Resource Cleanup: Ensures that workspaces are cleaned after execution.
# 📢 Notifications: Sends alerts in case of failures (Slack, email, etc.).
# 🔁 Retry Mechanism: Retries transient failures automatically.
# ⚡ Parallelization: Runs independent jobs concurrently to speed up execution.
# 📦 Dependency Caching: Caches Gradle dependencies to optimize build speed.


on:
  pull_request:
    types: [opened, synchronize, reopened, edited, ready_for_review]
    branches:
      - master
    paths:
      - '**'
  push:
    branches:
      - master

permissions:
  pull-requests: write
  contents: write
  security-events: write  # Required for CodeQL scanning
  actions: write
  statuses: write
  id-token: write

jobs:
  mega-linter:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the PR branch
      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
  
      # Step 2: Debug: Check directory structure and current working directory
      - name: Debug directory structure
        run: |
          echo "🔍 Checking directory structure..."
          ls -al .
          echo "🔍 Current working directory: $(pwd)"
          echo "🔍 Contents of current directory:"
          ls -al
  
      # Step 3: Run MegaLinter on PR changes
      - name: Run MegaLinter on PR changes
        run: |
          docker pull megalinter/megalinter:latest
          docker run --rm \
            -v ${{ github.workspace }}:/mnt/mega-linter \
            -e GITHUB_WORKSPACE=/mnt/mega-linter \
            megalinter/megalinter:latest --run --ci --disable=all --workspace /mnt/mega-linter --changed
  
      # Step 4: Upload MegaLinter report as an artifact
      - name: Upload MegaLinter report artifact
        uses: actions/upload-artifact@v4
        with:
          name: megalinter-report
          path: /tmp/lint/report/linters_logs
  
      # Step 5: Comment on PR with MegaLinter results
      - name: Comment on PR with MegaLinter results
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### MegaLinter Results
            Linter results for the pull request:
  
            PR Link: [${{ github.event.pull_request.html_url }}](${{ github.event.pull_request.html_url }})
  
            You can find the full MegaLinter report here: [Linting Report Artifact](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for fixing.
  
      # Step 6: Comment "approved" on PR if all linting checks passed
      - name: Comment approved on PR
        if: success()
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### MegaLinter Results
            The PR is ready for approval. All linting issues have been fixed.
  
            **PR has been approved**. ✅
