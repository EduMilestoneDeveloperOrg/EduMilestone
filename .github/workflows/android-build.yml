name: Android CI/CD Pipeline

# 🚀 Features Included in the CI/CD Pipeline
# 🚧 PR Restriction: Ensures only repository collaborators/members can raise PRs.
# 🛡️ Security Scan (CodeQL): Runs CodeQL security analysis.
# 🔍 Dependency Scan (Trivy): Scans dependencies for vulnerabilities.
# 🤖 AI Code Review (Copilot): Enforces GitHub Copilot AI review on PRs.
# 📜 PR Description Enforcement: Ensures meaningful PR descriptions.
# 📑 PR File Limit Enforcement: Restricts PRs modifying too many files.
# 🎨 Linting (ktlint): Enforces Kotlin coding standards.
# ✅ Organization Owner Approval: Requires manual approval from the repository owner.
# 🚀 Build & APK Generation: Compiles the project and generates an APK.
# 🧪 Unit Testing: Runs unit tests (optional but recommended).
# ✅ Final Merge Check: Ensures that all required jobs pass before PR approval.
# 🔄 Fail-Fast Strategy: Prevents unnecessary job execution if a critical job fails.
# ⏳ Timeout Enforcement: Limits execution time to prevent long-running jobs.
# ♻️ Resource Cleanup: Ensures that workspaces are cleaned after execution.
# 📢 Notifications: Sends alerts in case of failures (Slack, email, etc.).
# 🔁 Retry Mechanism: Retries transient failures automatically.
# ⚡ Parallelization: Runs independent jobs concurrently to speed up execution.
# 📦 Dependency Caching: Caches Gradle dependencies to optimize build speed.


on:
  pull_request:
    types: [opened, synchronize, reopened, edited, ready_for_review]
    branches:
      - master
    paths:
      - '**'
  push:
    branches:
      - master

permissions:
  pull-requests: write
  contents: write
  security-events: write  # Required for CodeQL scanning
  actions: write
  statuses: write
  id-token: write

jobs:
  mega-linter:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # To access the repository contents
      pull-requests: write  # To comment on PRs
  
    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3
  
    # Step 2: Set up Docker
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
  
    # Step 3: Run MegaLinter using Docker
    - name: Run MegaLinter
      run: |
        docker pull megalinter/megalinter:latest
        docker run --rm -v $(pwd):/mnt/mega-linter megalinter/megalinter:latest --run --ci --disable=all
  
    # Step 4: Upload MegaLinter report as artifact
    - name: Upload MegaLinter report artifact
      uses: actions/upload-artifact@v4
      with:
        name: megalinter-report
        path: /tmp/lint/report/linters_logs
  
    # Step 5: Fetch PR details (PR number, PR link)
    - name: Fetch PR details
      id: pr_details
      run: |
        PR_NUMBER=$(echo ${GITHUB_REF} | cut -d'/' -f3)
        PR_LINK="https://github.com/${GITHUB_REPOSITORY}/pull/${PR_NUMBER}"
        echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_ENV
        echo "PR_LINK=${PR_LINK}" >> $GITHUB_ENV
        echo "PR details: PR_NUMBER=${PR_NUMBER}, PR_LINK=${PR_LINK}"
  
    # Step 6: Comment on PR with MegaLinter results
    - name: Comment on PR with MegaLinter results
      uses: peter-evans/create-or-update-comment@v2
      with:
        issue-number: ${{ env.PR_NUMBER }}
        body: |
          ### MegaLinter Results
          Linter results for the pull request:
  
          PR Link: [${{ env.PR_LINK }}](${{env.PR_LINK }})
          
          You can find the full MegaLinter report here: [Linting Report Artifact](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for fixing.
  
    # Step 7: Comment approved if everything looks good 
    - name: Comment approved on PR
      if: success()
      uses: peter-evans/create-or-update-comment@v2
      with:
        issue-number: ${{ env.PR_NUMBER }}
        body: |
          ### MegaLinter Results
          The PR is ready for approval. All linting issues have been fixed.
  
          **PR has been approved**. ✅
