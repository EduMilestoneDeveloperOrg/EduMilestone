name: Android CI/CD Pipeline

# üöÄ Features Included in the CI/CD Pipeline
# üöß PR Restriction: Ensures only repository collaborators/members can raise PRs.
# üõ°Ô∏è Security Scan (CodeQL): Runs CodeQL security analysis.
# üîç Dependency Scan (Trivy): Scans dependencies for vulnerabilities.
# ü§ñ AI Code Review (Copilot): Enforces GitHub Copilot AI review on PRs.
# üìú PR Description Enforcement: Ensures meaningful PR descriptions.
# üìë PR File Limit Enforcement: Restricts PRs modifying too many files.
# üé® Linting (ktlint): Enforces Kotlin coding standards.
# ‚úÖ Organization Owner Approval: Requires manual approval from the repository owner.
# üöÄ Build & APK Generation: Compiles the project and generates an APK.
# üß™ Unit Testing: Runs unit tests (optional but recommended).
# ‚úÖ Final Merge Check: Ensures that all required jobs pass before PR approval.
# üîÑ Fail-Fast Strategy: Prevents unnecessary job execution if a critical job fails.
# ‚è≥ Timeout Enforcement: Limits execution time to prevent long-running jobs.
# ‚ôªÔ∏è Resource Cleanup: Ensures that workspaces are cleaned after execution.
# üì¢ Notifications: Sends alerts in case of failures (Slack, email, etc.).
# üîÅ Retry Mechanism: Retries transient failures automatically.
# ‚ö° Parallelization: Runs independent jobs concurrently to speed up execution.
# üì¶ Dependency Caching: Caches Gradle dependencies to optimize build speed.


on:
  pull_request:
    types: [opened, synchronize, reopened, edited, ready_for_review]
    branches:
      - master
    paths:
      - '**'
  push:
    branches:
      - master

permissions:
  pull-requests: write
  contents: write
  security-events: write  # Required for CodeQL scanning
  actions: write
  statuses: write

jobs:
# 1Ô∏è‚É£ Pre-Checks & PR Validation (No dependencies)
  pr_restriction:
    name: üöß Enforce PR Restrictions
    runs-on: ubuntu-latest

    steps:
      - name: üîç Debug & Verify PR Author and Branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Starting PR Debugging..."
          echo "üîπ GitHub Event: ${{ github.event_name }}"
          echo "üîπ Repository: ${{ github.repository }}"
          echo "üîπ Actor: ${{ github.actor }}"
          echo "üîπ Action: ${{ github.event.action }}"
          echo "üîπ PR Number: ${{ github.event.pull_request.number }}"
          echo "üîπ PR URL: ${{ github.event.pull_request.html_url }}"
  
          echo "üîç Extracting PR Number..."
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
  
          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "‚ùå ERROR: PR number is missing or invalid."
            exit 1
          fi
  
          echo "üîπ Extracted PR Number: '$PR_NUMBER'"
          echo "üîπ Repository: $REPO_NAME"
  
          echo "üîç Checking GitHub Token Authentication..."
          gh auth status || { echo "‚ùå GH_TOKEN authentication failed!"; exit 1; }
  
          echo "üîç Fetching PR Author..."
          PR_USER=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER" | jq -r '.user.login')
  
          if [[ -z "$PR_USER" || "$PR_USER" == "null" ]]; then
            echo "‚ùå ERROR: Failed to retrieve PR author."
            echo "   - PR number may be incorrect"
            echo "   - GH_TOKEN may lack permissions"
            echo "   - Repository may be private"
            exit 1
          fi
  
          echo "‚úÖ PR Author: $PR_USER"
  
          echo "üîç Checking if PR author is a collaborator or member..."
          COLLABORATOR_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/collaborators/$PR_USER")
  
          if [[ "$COLLABORATOR_STATUS" -ne 204 ]]; then
            echo "‚ùå ERROR: Only repository collaborators or members can raise pull requests!"
            exit 1
          fi
  
          echo "‚úÖ PR is from an authorized collaborator or member."
  
          echo "üîç Checking branch name..."
          PR_BRANCH="${{ github.head_ref }}"
          echo "üîπ PR Branch: $PR_BRANCH"
  
          # Check if branch name contains the required string
          if [[ ! "$PR_BRANCH" =~ M/M01/PROD_TOOLS/OCR/ ]]; then
            echo "‚ùå ERROR: Branch name does not meet the required pattern 'M/M01/PROD_TOOLS/OCR/'."
            exit 1
          fi
  
          echo "‚úÖ Branch name '$PR_BRANCH' is valid and meets the required pattern."

  enforce_pr_description:
    name: üìú Enforce PR Description
    runs-on: ubuntu-latest
    needs: [pr_restriction]
    steps:
      - name: üîç Check PR Description
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract pull request number
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
  
          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "‚ùå ERROR: Invalid PR number. Cannot check description."
            exit 1
          fi
  
          # Retrieve the PR description using curl
          DESCRIPTION=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER" | jq -r '.body')
  
          # Debugging: Show raw description for clarity
          echo "üîç Raw PR Description:"
          echo "$DESCRIPTION"
  
          # Ensure description retrieval succeeded
          if [[ -z "$DESCRIPTION" || "$DESCRIPTION" == "null" ]]; then
            echo "‚ùå ERROR: PR must have a meaningful description!"
            exit 1
          fi
  
          # Trim whitespace and check if the description is empty
          TRIMMED_DESC=$(echo "$DESCRIPTION" | xargs)
  
          if [[ -z "$TRIMMED_DESC" ]]; then
            echo "‚ùå ERROR: PR description cannot be empty or only spaces!"
            exit 1
          fi
          
          echo "‚úÖ PR has a valid description."

  enforce_pr_files_limit:
    name: üìë Limit PR File Changes (Max 50)
    runs-on: ubuntu-latest
    needs: [enforce_pr_description]
    steps:
      - name: üîç Check Number of Files Changed
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract pull request number and repository name
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
  
          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "‚ùå ERROR: Invalid PR number. Cannot check file count."
            exit 1
          fi
  
          # Fetch list of changed files using GitHub API
          RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER/files")
  
          # Debugging: Print the API response for troubleshooting
          echo "üîç API Response:"
          echo "$RESPONSE"
  
          # Extract file count
          FILE_COUNT=$(echo "$RESPONSE" | jq 'length' 2>/dev/null || echo "")
  
          # Ensure FILE_COUNT is valid and numeric
          if ! [[ "$FILE_COUNT" =~ ^[0-9]+$ ]]; then
            echo "‚ùå ERROR: Unable to determine the number of changed files."
            exit 1
          fi
  
          # Verify if the number of files changed exceeds the limit
          if [[ "$FILE_COUNT" -gt 50 ]]; then
            echo "‚ùå ERROR: PR modifies too many files ($FILE_COUNT). Please split into smaller PRs."
            exit 1
          fi
          
          echo "‚úÖ PR modifies $FILE_COUNT files, within the allowed limit."

  # 2Ô∏è‚É£ Security & Code Quality Checks (All depend on PR validation)
  security_scan:
    name: üõ°Ô∏è Run CodeQL Advanced Deep Scan
    needs: [enforce_pr_files_limit]
    uses: ./.github/workflows/codeql.yml  # Reusable CodeQL deep scan workflow
    with:
      language: 'java-kotlin'
      build-mode: 'autobuild'

  dependency_scan:
    name: üîç Dependency Scan (Trivy)
    runs-on: ubuntu-latest
    needs: [enforce_pr_files_limit]
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: üîé Scan for Vulnerabilities (Using Trivy Action)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          severity: 'HIGH,CRITICAL'
  
      - name: üìÑ Generate Trivy Report
        run: |
          trivy fs --severity HIGH,CRITICAL --format json -o trivy-report.json .
  
      - name: üìÑ Upload Trivy Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report
          path: trivy-report.json
  
      - name: üõ†Ô∏è Suggest Fixes
        run: |
          if [ -s trivy-report.json ]; then
            vulnerabilities=$(cat trivy-report.json | jq '.Results[]?.Vulnerabilities | length')
            if [ "$vulnerabilities" -gt 0 ]; then
              cat trivy-report.json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL") | "\(.PkgName) has \(.Severity) vulnerability: \(.VulnID) - \(.Title). Recommendation: \(.PrimaryURL)"'
            else
              echo "No high/critical vulnerabilities found."
            fi
          else
            echo "No vulnerabilities found or failed to generate the report."
          fi
  
      - name: üö® Fail if Vulnerabilities Found
        run: |
          if trivy fs --severity HIGH,CRITICAL . | grep -q "VULNERABILITY"; then
            echo "‚ùå High/Critical vulnerabilities found!"
            exit 1
          fi  # Added fi to properly close the if statement

 # Final Job merge check: Reporting Status to GitHub API
  merge_check:
    name: ‚úÖ Final Merge Check (All Jobs Status)
    runs-on: ubuntu-latest
    needs:
      - security_scan
      - dependency_scan
    outputs:
      merge_status: ${{ steps.verify_status.outputs.merge_status }}  # ‚úÖ Pass status to auto_merge
  
    steps:
      - name: üî¨ Verify Job Status Before Merging
        id: verify_status
        run: |
          echo "üîé Checking all required job statuses..."
          if [[ "${{ needs.pr_restriction.result }}" == "failure" ]] || 
             [[ "${{ needs.enforce_pr_description.result }}" == "failure" ]] || 
             [[ "${{ needs.enforce_pr_files_limit.result }}" == "failure" ]] || 
             [[ "${{ needs.security_scan.result }}" == "failure" ]] || 
             [[ "${{ needs.dependency_scan.result }}" == "failure" ]]; then
            echo "‚ùå One or more jobs failed. Blocking merge."
            echo "merge_status=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ All jobs passed! Merge allowed."
          echo "merge_status=true" >> $GITHUB_OUTPUT
  
      - name: üì¢ üö¶ Update CI/CD Status on GitHub
        run: |
          echo "üîÑ Updating Final Merge Allow Status..."
          if [[ "${{ steps.verify_status.outputs.merge_status }}" == "true" ]]; then
            curl -X POST "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"state": "success", "context": "Final Merge Allow", "description": "All checks passed successfully.", "target_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}'
          else
            curl -X POST "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"state": "failure", "context": "Final Merge Allow", "description": "Merge blocked due to job failure.", "target_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}'
            exit 1
          fi

  auto_merge:
    name: üîÑ Auto Merge PR (With Status Verification)
    needs: [merge_check]
    runs-on: ubuntu-latest

    steps:
      - name: ‚è≥ Initial Delay (Before Checking Merge Queue)
        run: sleep 10

      - name: üîç Fetch PR Number from Merge Queue
        id: fetch_pr_number
        run: |
          echo "üîç Fetching PR Number from Merge Queue..."
          
          MERGE_QUEUE_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=open&sort=created&direction=asc")

          PR_NUMBER=$(echo "$MERGE_QUEUE_JSON" | jq -r '.[0].number')

          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "‚ùå No PR found in the merge queue. Exiting."
            exit 1
          fi

          echo "‚úÖ Found PR Number in Merge Queue: $PR_NUMBER"
          echo "pr_number=$PR_NUMBER" >> $GITHUB_ENV

      - name: üîç Fetch Latest Commit SHA for the PR
        id: fetch_sha
        run: |
          echo "üîç Fetching Latest Commit SHA for PR #${{ env.pr_number }}..."
          
          LATEST_COMMIT_SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ env.pr_number }}" | jq -r '.head.sha')

          if [[ -z "$LATEST_COMMIT_SHA" || "$LATEST_COMMIT_SHA" == "null" ]]; then
            echo "‚ùå Could not retrieve SHA for PR #${{ env.pr_number }}. Exiting."
            exit 1
          fi

          echo "‚úÖ Latest Commit SHA for PR #${{ env.pr_number }}: $LATEST_COMMIT_SHA"
          echo "commit_sha=$LATEST_COMMIT_SHA" >> $GITHUB_ENV

      - name: üì¢ üö¶ Send Initial GitHub Status (Merge Pending)
        run: |
          echo "üîÑ Sending initial success status for PR #${{ env.pr_number }}..."
          curl -X POST "https://api.github.com/repos/${{ github.repository }}/statuses/${{ env.commit_sha }}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"state": "success", "context": "Final Merge Allow", "description": "Merge validation pending, retrying...", "target_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}'

      - name: üîÑ Check PR Merge Status & Resend GitHub API Status if Needed
        run: |
          MAX_ATTEMPTS=5
          ATTEMPT=1
          SLEEP_INTERVAL=120  # 2 minutes

          while [[ "$ATTEMPT" -le "$MAX_ATTEMPTS" ]]; do
            echo "üîÑ Checking PR mergeability (Attempt $ATTEMPT)..."

            PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${{ env.pr_number }}")

            MERGE_QUEUE_STATE=$(echo "$PR_DATA" | jq -r '.mergeable_state')
            MERGED_STATUS=$(echo "$PR_DATA" | jq -r '.merged')

            echo "üîç PR #${{ env.pr_number }} Merge Queue State: $MERGE_QUEUE_STATE"
            echo "üîç PR #${{ env.pr_number }} Merged Status: $MERGED_STATUS"

            if [[ "$MERGED_STATUS" == "true" ]]; then
              echo "‚úÖ PR #${{ env.pr_number }} is merged successfully!"
              exit 0
            elif [[ "$MERGE_QUEUE_STATE" == "clean" ]]; then
              echo "‚úÖ PR is mergeable and ready for merging."
              exit 0
            elif [[ "$MERGE_QUEUE_STATE" == "unstable" ]]; then
              echo "‚è≥ PR is still 'unstable'. Re-sending success status to GitHub API..."

              curl -X POST "https://api.github.com/repos/${{ github.repository }}/statuses/${{ env.commit_sha }}" \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -d '{"state": "success", "context": "Final Merge Allow", "description": "Still waiting in merge queue, retrying...", "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}'

              echo "‚è≥ Waiting for $SLEEP_INTERVAL seconds before retrying..."
              sleep $SLEEP_INTERVAL
            else
              echo "‚ùå PR has conflicts or unexpected state. Exiting."
              exit 1
            fi

            ATTEMPT=$((ATTEMPT + 1))
          done

          echo "‚ùå PR #${{ env.pr_number }} remained 'unstable' after multiple attempts. Skipping merge."
          exit 1
