#‚úÖ Adds a 10s delay before checking the merge queue
#‚úÖ Explicitly fetches PR number from the merge queue API
#‚úÖ Handles cases where the merge queue is empty
#‚úÖ Retries only if merge queue check fails, sending GitHub status on each retry
#‚úÖ Performs Squash & Merge if PR is ready
#‚úÖ Sends GitHub API status update after successful merge
#‚úÖ Prevents unnecessary retries in the main workflow

name: Auto Merge
on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request Number'
        required: true
        type: string
      commit_sha:
        description: 'Commit SHA'
        required: true
        type: string

jobs:
  check-merge-status:
    runs-on: ubuntu-latest
    steps:
      - name: üì¢ üö¶ Send Initial GitHub Status (Merge Pending)
        run: |
          echo "üîÑ Sending initial success status for PR #${{ inputs.pr_number }}..."
          curl -X POST "https://api.github.com/repos/${{ github.repository }}/statuses/${{ inputs.commit_sha }}" \
            -H "Authorization: token ${{ secrets.PAT_GITHUB }}" \
            -d '{"state": "success", "context": "Final Merge Allow", "description": "Merge validation pending, retrying...", "target_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}'

      - name: üîÑ Check PR Merge Queue Status & Resend GitHub API Status if Needed
        run: |
          MAX_ATTEMPTS=5
          ATTEMPT=1
          SLEEP_INTERVAL=60  # 1 minute

          while [[ "$ATTEMPT" -le "$MAX_ATTEMPTS" ]]; do
            echo "üîÑ Checking PR mergeability (Attempt $ATTEMPT)..."

            PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.PAT_GITHUB }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${{ inputs.pr_number }}")

            MERGE_QUEUE_STATE=$(echo "$PR_DATA" | jq -r '.mergeable_state')
            MERGED_STATUS=$(echo "$PR_DATA" | jq -r '.merged')
            IN_MERGE_QUEUE=$(echo "$PR_DATA" | jq -r '.merge_queue_entry')

            echo "üîç PR #${{ inputs.pr_number }} Merge Queue State: $MERGE_QUEUE_STATE"
            echo "üîç PR #${{ inputs.pr_number }} Merged Status: $MERGED_STATUS"
            echo "üîç PR #${{ inputs.pr_number }} Merge Queue Entry: $IN_MERGE_QUEUE"

            if [[ "$MERGED_STATUS" == "true" ]]; then
              echo "‚úÖ PR #${{ inputs.pr_number }} is merged successfully!"
              exit 0
            elif [[ "$MERGE_QUEUE_STATE" == "clean" ]]; then
              echo "‚úÖ PR is mergeable and ready for merging."
              exit 0
            elif [[ "$IN_MERGE_QUEUE" != "null" ]]; then
              echo "‚è≥ PR is in the merge queue. Re-sending success status to GitHub API..."

              curl -X POST "https://api.github.com/repos/${{ github.repository }}/statuses/${{ inputs.commit_sha }}" \
                -H "Authorization: token ${{ secrets.PAT_GITHUB }}" \
                -d '{"state": "success", "context": "Final Merge Allow", "description": "Still waiting in merge queue, retrying...", "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}'

              echo "‚è≥ Waiting for $SLEEP_INTERVAL seconds before retrying..."
              sleep $SLEEP_INTERVAL
            else
              echo "‚ùå PR is not in merge queue or has conflicts. Exiting."
              exit 1
            fi

            ATTEMPT=$((ATTEMPT + 1))
          done

          echo "‚ùå PR #${{ inputs.pr_number }} remained in queue without merging. Skipping merge."
          exit 1
